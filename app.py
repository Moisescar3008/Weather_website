import pandas as pd
import streamlit as st
from datetime import datetime
import re
import os
import requests
from dotenv import load_dotenv
from visualization import generate_graphs

# Cargar variables de entorno
load_dotenv()  
api_k = st.secrets["OPENWEATHER_API_KEY"]

# TÃ­tulo de la app
st.title("ðŸ“Š Clima en las Ciudades de MÃ©xico")

# Lista de ciudades importantes en MÃ©xico
cities = [
    "Aguascalientes", "Mexicali", "La Paz", "Campeche", "Saltillo", "Colima", "Tuxtla GutiÃ©rrez", "Chihuahua",
    "Ciudad de MÃ©xico", "Durango", "LeÃ³n", "Acapulco", "Pachuca", "Guadalajara", "Toluca", "Morelia", "Cuernavaca",
    "Tepic", "Monterrey", "Oaxaca", "Puebla", "QuerÃ©taro", "Chetumal", "San Luis PotosÃ­", "CuliacÃ¡n",
    "Hermosillo", "Villahermosa", "Ciudad Victoria", "Tlaxcala", "Xalapa", "MÃ©rida", "Zacatecas"
]

# FunciÃ³n para convertir temperatura de Kelvin a Celsius
def kelvin_to_celsius(temp_k):
    return round(temp_k - 273.15, 2)

# Selector de ciudad en Streamlit
city = st.selectbox("Selecciona una ciudad:", cities)

if st.button("Obtener Clima"):
    clean_city = re.sub(r'[^\w\s-]', '', city).replace(' ', '_')
    
    # Construir la URL de la API
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&cnt=40&appid={api_k}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()

        lat = data['city']['coord']['lat']
        lon = data['city']['coord']['lon']
        weather_data = []

        for hour in data['list']:
            date_time = datetime.utcfromtimestamp(hour['dt']).strftime('%Y-%m-%d %H:%M:%S')
            temp = kelvin_to_celsius(hour['main']['feels_like'])
            pressure = hour['main']['pressure']
            humidity = hour['main']['humidity']
            weather_main = hour['weather'][0]['main']
            weather_description = hour['weather'][0]['description']
            wind_speed = hour['wind']['speed']
            wind_direction = hour['wind']['deg']
            cloudiness = hour['clouds']['all']
            rain_volume = hour.get('rain', {}).get('3h', 0)
            snow_volume = hour.get('snow', {}).get('3h', 0)

            weather_data.append({
                "Fecha y Hora": date_time,
                "Temperatura (Â°C)": temp,
                "PresiÃ³n": pressure,
                "Humedad": humidity,
                "Clima": weather_main,
                "DescripciÃ³n": weather_description,
                "Viento (km/h)": wind_speed,
                "DirecciÃ³n del Viento": wind_direction,
                "Nubosidad (%)": cloudiness,
                "Lluvia (mm)": rain_volume,
                "Nieve (mm)": snow_volume
            })

        # Convertir a DataFrame
        df = pd.DataFrame(weather_data)

        # Mostrar tabla en Streamlit
        st.subheader(f"ðŸ“Œ Datos del Clima en {city}")
        st.dataframe(df)

        # Guardar en CSV
        csv_folder = "csv"
        filename = os.path.join(csv_folder, f"{clean_city}_weather.csv")

        if not os.path.exists(csv_folder):
            os.makedirs(csv_folder)

        df.to_csv(filename, index=False, encoding="utf-8")
        st.success(f"Datos guardados en `{filename}`")

        # ðŸš€ Ejecutar automÃ¡ticamente `visualization.py`
        generate_graphs(city)

    else:
        st.error(f"No se pudo obtener el clima de {city}. CÃ³digo de error: {response.status_code}")
